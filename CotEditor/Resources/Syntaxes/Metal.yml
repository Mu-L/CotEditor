attributes:
- beginString: '#define'
- beginString: '#elif'
- beginString: '#else'
- beginString: '#endif'
- beginString: '#error'
- beginString: '#if'
- beginString: '#ifdef'
- beginString: '#ifndef'
- beginString: '#include'
- beginString: '#line'
- beginString: '#pragma'
- beginString: '#undef'
- beginString: '#warning'
characters:
- beginString: '"'
  endString: '"'
- beginString: ''''
  endString: ''''
commands:
- beginString: cross
- beginString: dot
- beginString: get_thread_position_in_grid
- beginString: get_thread_position_in_threadgroup
- beginString: get_threadgroup_position_in_grid
- beginString: length
- beginString: normalize
- beginString: read
- beginString: reflect
- beginString: sample
- beginString: write
commentDelimiters: {}
comments: []
completions: []
extensions:
- keyString: metal
- keyString: msl
filenames: []
interpreters: []
keywords:
- beginString: aligna
- beginString: alignof
- beginString: and
- beginString: and_eq
- beginString: asm
- beginString: auto
- beginString: bitand
- beginString: bitor
- beginString: bool
- beginString: break
- beginString: case
- beginString: catch
- beginString: char
- beginString: class
- beginString: compl
- beginString: compute
- beginString: const
- beginString: constant
- beginString: continue
- beginString: decltype
- beginString: default
- beginString: device
- beginString: do
- beginString: double
- beginString: else
- beginString: enum
- beginString: explicit
- beginString: export
- beginString: extern
- beginString: float
- beginString: for
- beginString: fragment
- beginString: friend
- beginString: if
- beginString: inline
- beginString: int
- beginString: kernel
- beginString: long
- beginString: mutable
- beginString: namespace
- beginString: not
- beginString: not_eq
- beginString: nullptr
- beginString: operator
- beginString: or
- beginString: or_eq
- beginString: private
- beginString: protected
- beginString: public
- beginString: register
- beginString: return
- beginString: short
- beginString: signed
- beginString: sizeof
- beginString: static
- beginString: static_assert
- beginString: static_cast
- beginString: struct
- beginString: switch
- beginString: template
- beginString: this
- beginString: thread
- beginString: thread_local
- beginString: threadgroup
- beginString: throw
- beginString: try
- beginString: typedef
- beginString: typeid
- beginString: typename
- beginString: union
- beginString: unsigned
- beginString: using
- beginString: vertex
- beginString: volatile
- beginString: while
- beginString: xor
- beginString: xor_eq
kind: code
metadata:
  author: aybarsnazlica
  description: Metal Shading Language syntax based on Apple's MSL
  distributionURL: https://coteditor.com
  lastModified: '2025-06-21'
  license: Same as CotEditor
  version: 1.0.0
numbers:
- beginString: '0'
  description: zero
- beginString: \b-?[1-9][0-9]*[ul]{0,3}\b
  description: integer
  ignoreCase: true
  regularExpression: true
- beginString: \b-?\d+(\.\d+)?(e[-+]?\d+)?[fl]?\b
  description: float
  ignoreCase: true
  regularExpression: true
- beginString: \b0[1-7][0-7]*[ul]{0,3}\b
  description: octal
  ignoreCase: true
  regularExpression: true
outlineMenu:
- beginString: \b(kernel|vertex|fragment|compute)\s+\w+\s+(\w+)\s*\(
  keyString: '$1 function: $2'
- beginString: \bstruct\s+(\w+)
  keyString: 'struct: $1'
- beginString: \btypedef\s+.*\s+(\w+)\s*;
  keyString: 'typedef: $1'
strings: []
types:
- beginString: bool
- beginString: char
- beginString: char16_t
- beginString: char32_t
- beginString: double
- beginString: float
- beginString: int
- beginString: long
- beginString: short
- beginString: signed
- beginString: unsigned
- beginString: void
- beginString: wchar_t
values:
- beginString: 'false'
- beginString: 'NULL'
- beginString: 'true'
variables: []
